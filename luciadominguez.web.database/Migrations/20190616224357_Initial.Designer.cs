// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using luciadominguez.web.database;

namespace web.database.Migrations
{
    [DbContext(typeof(SQLiteContext))]
    [Migration("20190616224357_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("luciadominguez.web.domain.Album", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<string>("CoverId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description");

                    b.Property<string>("Title");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("CoverId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("luciadominguez.web.domain.Comment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<string>("Author");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("PhotoId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("luciadominguez.web.domain.Photo", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<string>("AlbumId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Extension");

                    b.Property<string>("FileName");

                    b.Property<int>("Height");

                    b.Property<decimal>("Price");

                    b.Property<string>("Title");

                    b.Property<string>("Url");

                    b.Property<int>("Width");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("luciadominguez.web.domain.PhotoTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PhotoId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<string>("TagId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.HasIndex("TagId");

                    b.ToTable("PhotoTags");
                });

            modelBuilder.Entity("luciadominguez.web.domain.Tag", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("luciadominguez.web.domain.Album", b =>
                {
                    b.HasOne("luciadominguez.web.domain.Photo", "Cover")
                        .WithMany()
                        .HasForeignKey("CoverId");
                });

            modelBuilder.Entity("luciadominguez.web.domain.Comment", b =>
                {
                    b.HasOne("luciadominguez.web.domain.Photo", "Photo")
                        .WithMany("Comments")
                        .HasForeignKey("PhotoId");
                });

            modelBuilder.Entity("luciadominguez.web.domain.Photo", b =>
                {
                    b.HasOne("luciadominguez.web.domain.Album", "Album")
                        .WithMany("Photos")
                        .HasForeignKey("AlbumId");
                });

            modelBuilder.Entity("luciadominguez.web.domain.PhotoTag", b =>
                {
                    b.HasOne("luciadominguez.web.domain.Photo", "Photo")
                        .WithMany("PhotoTags")
                        .HasForeignKey("PhotoId");

                    b.HasOne("luciadominguez.web.domain.Tag", "Tag")
                        .WithMany("PhotoTags")
                        .HasForeignKey("TagId");
                });
#pragma warning restore 612, 618
        }
    }
}
